// <auto-generated />
using System;
using AH.CancerConnect.AdminAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AH.CancerConnect.AdminAPI.Migrations
{
    [DbContext(typeof(CancerConnectDbContext))]
    [Migration("20251021141049_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProviderPoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.HasIndex("ProviderPoolId");

                    b.HasIndex("LastName", "FirstName");

                    b.ToTable("Provider", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.ProviderPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("ProviderPool", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 10, 21, 14, 10, 48, 626, DateTimeKind.Utc).AddTicks(8056),
                            DateModified = new DateTime(2025, 10, 21, 14, 10, 48, 626, DateTimeKind.Utc).AddTicks(8059),
                            Description = "Primary care team for oncology patients",
                            IsActive = true,
                            Name = "Provider Pool A"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 10, 21, 14, 10, 48, 626, DateTimeKind.Utc).AddTicks(8062),
                            DateModified = new DateTime(2025, 10, 21, 14, 10, 48, 626, DateTimeKind.Utc).AddTicks(8063),
                            Description = "Surgical care team for cancer treatment",
                            IsActive = true,
                            Name = "Provider Pool B"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 10, 21, 14, 10, 48, 626, DateTimeKind.Utc).AddTicks(8065),
                            DateModified = new DateTime(2025, 10, 21, 14, 10, 48, 626, DateTimeKind.Utc).AddTicks(8066),
                            Description = "Radiation and chemotherapy specialist team",
                            IsActive = true,
                            Name = "Provider Pool C"
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.Provider", b =>
                {
                    b.HasOne("AH.CancerConnect.AdminAPI.Features.Provider.ProviderPool", "ProviderPool")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderPoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProviderPool");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.ProviderPool", b =>
                {
                    b.Navigation("Providers");
                });
#pragma warning restore 612, 618
        }
    }
}
