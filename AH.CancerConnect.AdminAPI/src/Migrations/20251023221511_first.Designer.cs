// <auto-generated />
using System;
using AH.CancerConnect.AdminAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AH.CancerConnect.AdminAPI.Migrations
{
    [DbContext(typeof(CancerConnectDbContext))]
    [Migration("20251023221511_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProviderPoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.HasIndex("ProviderPoolId");

                    b.HasIndex("LastName", "FirstName");

                    b.ToTable("Provider", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.ProviderPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("ProviderPool", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(5980),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(5983),
                            Description = "Primary care team for oncology patients",
                            IsActive = true,
                            Name = "Provider Pool A"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(5986),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(5987),
                            Description = "Surgical care team for cancer treatment",
                            IsActive = true,
                            Name = "Provider Pool B"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(5989),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(5990),
                            Description = "Radiation and chemotherapy specialist team",
                            IsActive = true,
                            Name = "Provider Pool C"
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomConfiguration.SymptomConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertTrigger")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SeverityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ShowForBreast")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowForLung")
                        .HasColumnType("bit");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<string>("ToolTipContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("SymptomId");

                    b.HasIndex("ShowForBreast", "IsActive");

                    b.HasIndex("ShowForLung", "IsActive");

                    b.ToTable("SymptomConfiguration", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlertTrigger = "When Severe is indicated for 1+ day or Moderate is indicated for 2+ days",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6134),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6135),
                            IsActive = true,
                            Notes = "Used CTCAE (Common Terminology Criteria for Adverse Events); Consider incorporating GAD-7 and PHQ-2 screening tools.",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 1,
                            ToolTipContent = "Mild: not interfering with day to day activities; Moderate: interfering somewhat with day to day activities; Severe: severely limiting daily activities including self-care."
                        },
                        new
                        {
                            Id = 2,
                            AlertTrigger = "When 2 days of moderate or 1 score of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6140),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6141),
                            IsActive = true,
                            Notes = "Alert triggered-When 2 days of moderate or 1 score of Severe. Ask the Dietician for input.",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 2,
                            ToolTipContent = "Mild: loss of appetite without changing your eating habits; Moderate: your eating habits have changed but you haven't lost any weight; Severe: You are unable to eat or drink and have lost weight."
                        },
                        new
                        {
                            Id = 3,
                            AlertTrigger = "When Yes is indicated for 1+ day",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6144),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6145),
                            IsActive = true,
                            Notes = "Could we use directions provided by the surgeon? Need guidance from Tess Abrahmson.",
                            SeverityType = "Yes or No",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 3,
                            ToolTipContent = "Bleeding through bandage within an hour, bruising, having nose bleeds, bleeding gums, blood in urine, etc."
                        },
                        new
                        {
                            Id = 4,
                            AlertTrigger = "When 2 days of moderate or 1 score of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6148),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6148),
                            IsActive = true,
                            Notes = "Use CTCAE 'flu like symptoms'. Trigger: Moderate 2 days, severe 1 day",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 4,
                            ToolTipContent = "Mild: does not impact your activities; Moderate: somewhat limit your activities and self-care; Severe: severely or completely limit your activities and self-care"
                        },
                        new
                        {
                            Id = 5,
                            AlertTrigger = "When 2 days of moderate or 1 score of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6153),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6154),
                            IsActive = true,
                            Notes = "When moderate is listed for 2 days or severe for 1 day",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 5,
                            ToolTipContent = "Mild: occasional symptoms or symptoms that come and go, occasionally may use a bowel medication like a stool softener or laxative; Moderate: persistent symptoms, regularly use bowel medications like a laxative or enema, somewhat limits your activities; Severe: does not resolve with bowel medications, severely limits activities and self-care"
                        },
                        new
                        {
                            Id = 6,
                            AlertTrigger = "When 2 days of moderate or 1 score of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6156),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6157),
                            IsActive = true,
                            Notes = "Moderate 2-3 days; severe 1 day",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 6,
                            ToolTipContent = "Mild: cough does not require any over the counter medication, does not interfere with your activities; Moderate: Cough requires over the counter medications, somewhat limiting your activities; Severe: cough is severe requiring medical intervention, severely limits activities and self-care"
                        },
                        new
                        {
                            Id = 7,
                            AlertTrigger = "When Severe is indicated for 1+ day",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6159),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6160),
                            IsActive = true,
                            Notes = "Need to take into consideration if patient has chronic depression. Consider Social Worker assistance.",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 7,
                            ToolTipContent = "Mild: not interfering with day to day activities; Moderate: interfering somewhat with day to day activities; Severe: severely limiting daily activities including self-care."
                        },
                        new
                        {
                            Id = 8,
                            AlertTrigger = "When 2 days of moderate or 1 score of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6162),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6163),
                            IsActive = true,
                            Notes = "Moderate x 2 days, severe x1 day (from Oncology RN Guideline)",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 8,
                            ToolTipContent = "Mild: increase of less than 4 stools/day over baseline; mild increase in ostomy output compared to baseline; Moderate: Increase 4-6 stools/day over baseline; moderate increase in ostomy output compared to baseline, limiting activities; Severe: Increase of 7 or more stools per day over baseline; severe increase in ostomy output, limiting activities and self care"
                        },
                        new
                        {
                            Id = 9,
                            AlertTrigger = "When 2 days of moderate or 1 score of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6165),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6166),
                            IsActive = true,
                            Notes = "Moderate x2, severe x 1 (from oncology RN guideline)",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 9,
                            ToolTipContent = "Mild: fatigue relieved by rest; Moderate: fatigue not relieved by rest, limiting activities; Severe: Fatigue not relieved by rest, limiting self care"
                        },
                        new
                        {
                            Id = 10,
                            AlertTrigger = "Trigger when 1 day of Yes",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6168),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6169),
                            IsActive = true,
                            Notes = "x1 of mild. If patients have a fever, they are instructed to call their care team.",
                            SeverityType = "Yes or No",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 10,
                            ToolTipContent = "No when temp is 100.4 or lower; Yes when temp is over 100.4"
                        },
                        new
                        {
                            Id = 11,
                            AlertTrigger = "When 1 days of moderate or 1 score of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6171),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6172),
                            IsActive = true,
                            Notes = "x1 of moderate (oncology RN guideline)",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 11,
                            ToolTipContent = "Mild: loss of appetite without changing your eating habits, that are resolved with prescribed medication; Moderate: your eating habits have changed but you haven't lost any weight or any episode of vomiting, that are not resolved with prescribed medication; Severe: You are unable to eat or drink and have lost weight or any episode of vomiting that are not resolved with prescribed medication."
                        },
                        new
                        {
                            Id = 12,
                            AlertTrigger = "When an 4 or above is indicated for 1 time",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6174),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6175),
                            IsActive = true,
                            Notes = "Moderate and severe x1 (ONS Telephone triage). Used CTCAE grading criteria",
                            SeverityType = "1 to 10 Scale",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 12,
                            ToolTipContent = "1-3: mild pain; 4-6: moderate pain; limiting activities; 7-10: severe pain, limiting self care"
                        },
                        new
                        {
                            Id = 13,
                            AlertTrigger = "When Severe is indicated for 2+ days",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6177),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6178),
                            IsActive = true,
                            Notes = "CTCAE grading. How do we account for an expected side effect?",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 13,
                            ToolTipContent = "Mild: Noticeable but not impactful on day-to-day activities; Moderate: Includes symptoms like hot or cold sensitivity, decrease in grip strength, or stability on feet; Severe: Symptoms such as inability to button clothing or pick up smaller items."
                        },
                        new
                        {
                            Id = 14,
                            AlertTrigger = "When 1 days of moderate or 1 day of Severe",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6252),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6253),
                            IsActive = true,
                            Notes = "Moderate x1; severe x1 (ONS Telephone triage)",
                            SeverityType = "Mild, Moderate, Severe",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 14,
                            ToolTipContent = "Mild: Shortness of breath with moderate exertion; Moderate: Shortness of breath with minimal exertion; limits activities; Severe: Shortness of breath at rest, limiting self care"
                        },
                        new
                        {
                            Id = 15,
                            AlertTrigger = "Trigger 1 day of Yes",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6256),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6256),
                            IsActive = true,
                            SeverityType = "Yes or No",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 15,
                            ToolTipContent = "Yes a new rash"
                        },
                        new
                        {
                            Id = 16,
                            AlertTrigger = "Trigger 1 day of Yes",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6259),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6259),
                            IsActive = true,
                            Notes = "Should we generalize this and skin rash to skin changes?",
                            SeverityType = "Yes or No",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 16,
                            ToolTipContent = "Yes there is redness"
                        },
                        new
                        {
                            Id = 17,
                            AlertTrigger = "Trigger 1 day of Yes",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6262),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6262),
                            IsActive = true,
                            Notes = "Yes for both breast and lung",
                            SeverityType = "Yes or No",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 17,
                            ToolTipContent = "Yes: Swelling anywhere on body"
                        },
                        new
                        {
                            Id = 18,
                            AlertTrigger = "Trigger 1 day of Yes",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6264),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6265),
                            IsActive = true,
                            Notes = "Yes for both breast and lung",
                            SeverityType = "Yes or No",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 18,
                            ToolTipContent = "Yes, mouth sores present"
                        },
                        new
                        {
                            Id = 19,
                            AlertTrigger = "Trigger when score 4 or higher for 4 days in a row or score 4 or higher for 4 days within 10 days",
                            DateCreated = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6267),
                            DateModified = new DateTime(2025, 10, 23, 22, 15, 11, 287, DateTimeKind.Utc).AddTicks(6268),
                            IsActive = true,
                            Notes = "Recommendation from Social Work Team and Operations",
                            SeverityType = "Scale of 0-10",
                            ShowForBreast = true,
                            ShowForLung = true,
                            SymptomId = 19,
                            ToolTipContent = "Distress is an unpleasant experience of a mental, physical, social, or spiritual nature. It can affect the way you think, feel, or act. Distress may make it harder to cope with having cancer, its symptoms, or its treatment. Instructions: Please circle the number (0–10) that best describes how much distress you have been experiencing in the past week, including today."
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Invalid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Symptom", "ref", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.SymptomCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SymptomCategory");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.SymptomRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<string>("SymptomValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SymptomId");

                    b.ToTable("SymptomRange");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.Provider", b =>
                {
                    b.HasOne("AH.CancerConnect.AdminAPI.Features.Provider.ProviderPool", "ProviderPool")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderPoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProviderPool");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomConfiguration.SymptomConfiguration", b =>
                {
                    b.HasOne("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.Symptom", "Symptom")
                        .WithMany()
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SymptomConfiguration_Symptom_SymptomId");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.SymptomRange", b =>
                {
                    b.HasOne("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.SymptomCategory", "Category")
                        .WithMany("SymptomRanges")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.Symptom", "Symptom")
                        .WithMany("SymptomRanges")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.Provider.ProviderPool", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.Symptom", b =>
                {
                    b.Navigation("SymptomRanges");
                });

            modelBuilder.Entity("AH.CancerConnect.AdminAPI.Features.SymptomsTracking.Models.SymptomCategory", b =>
                {
                    b.Navigation("SymptomRanges");
                });
#pragma warning restore 612, 618
        }
    }
}
