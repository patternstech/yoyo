// <auto-generated />
using System;
using AH.CancerConnect.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AH.CancerConnect.API.Migrations
{
    [DbContext(typeof(CancerConnectDbContext))]
    partial class CancerConnectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AH.CancerConnect.API.Features.Drainage.DrainageSetup.Drain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrainageSetupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DrainageSetupId", "IsArchived");

                    b.ToTable("Drain", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.Drainage.DrainageSetup.DrainageSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GoalDrainageAmount")
                        .HasColumnType("int");

                    b.Property<bool>("HasProviderGoalAmount")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("DrainageSetup", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.Notes.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Note", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Invalid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Symptom", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Patient anxiety levels",
                            DisplayTitle = "Anxiety",
                            Invalid = false,
                            Name = "Anxiety"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Loss of appetite",
                            DisplayTitle = "Appetite Loss",
                            Invalid = false,
                            Name = "Appetite Loss"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Any bleeding symptoms",
                            DisplayTitle = "Bleeding",
                            Invalid = false,
                            Name = "Bleeding"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Difficulty with daily activities",
                            DisplayTitle = "Impaired Activities",
                            Invalid = false,
                            Name = "Impaired activity (ADLs)"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Bowel movement difficulties",
                            DisplayTitle = "Constipation",
                            Invalid = false,
                            Name = "Constipation"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Persistent coughing",
                            DisplayTitle = "Cough",
                            Invalid = false,
                            Name = "Cough"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Emotional depression",
                            DisplayTitle = "Depression",
                            Invalid = false,
                            Name = "Depression"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Loose bowel movements",
                            DisplayTitle = "Diarrhea",
                            Invalid = false,
                            Name = "Diarrhea"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Tiredness and low energy",
                            DisplayTitle = "Fatigue",
                            Invalid = false,
                            Name = "Fatigue"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Elevated body temperature",
                            DisplayTitle = "Fever",
                            Invalid = false,
                            Name = "Fever"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Feeling sick or vomiting",
                            DisplayTitle = "Nausea/Vomiting",
                            Invalid = false,
                            Name = "Nausea or Vomiting"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Physical pain levels",
                            DisplayTitle = "Pain",
                            Invalid = false,
                            Name = "Pain"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Peripheral neuropathy symptoms",
                            DisplayTitle = "Tingling/Numbness",
                            Invalid = false,
                            Name = "Tingling and Numbness in hands or feet"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Difficulty breathing",
                            DisplayTitle = "Shortness of Breath",
                            Invalid = false,
                            Name = "Shortness of breath"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Skin irritation or rash",
                            DisplayTitle = "Skin Rash",
                            Invalid = false,
                            Name = "Skin rash"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Red skin conditions",
                            DisplayTitle = "Skin Redness",
                            Invalid = false,
                            Name = "Redness of skin"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Fluid retention and swelling",
                            DisplayTitle = "Swelling",
                            Invalid = false,
                            Name = "Edema/Swelling"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Oral cavity sores",
                            DisplayTitle = "Mouth Sores",
                            Invalid = false,
                            Name = "Mouth Sores"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Overall emotional distress level",
                            DisplayTitle = "Emotional Distress",
                            Invalid = false,
                            Name = "Level of Emotional Distress"
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("SymptomCategory", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayValue = "Mild/Moderate/Severe",
                            Name = "MildModerateSevere"
                        },
                        new
                        {
                            Id = 2,
                            DisplayValue = "Yes/No",
                            Name = "YesNo"
                        },
                        new
                        {
                            Id = 3,
                            DisplayValue = "1-10 Scale",
                            Name = "Scale1To10"
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomEntryId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<string>("SymptomValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SymptomEntryId");

                    b.HasIndex("SymptomId");

                    b.ToTable("SymptomDetail", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SymptomEntry", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<string>("SymptomValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SymptomId");

                    b.ToTable("SymptomRange", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            SymptomId = 1,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            SymptomId = 1,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            SymptomId = 1,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            SymptomId = 2,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            SymptomId = 2,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            SymptomId = 2,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            SymptomId = 4,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            SymptomId = 4,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            SymptomId = 4,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            SymptomId = 5,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            SymptomId = 5,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            SymptomId = 5,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            SymptomId = 6,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            SymptomId = 6,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            SymptomId = 6,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            SymptomId = 7,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            SymptomId = 7,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            SymptomId = 7,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            SymptomId = 8,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            SymptomId = 8,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            SymptomId = 8,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            SymptomId = 9,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            SymptomId = 9,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            SymptomId = 9,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            SymptomId = 11,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 1,
                            SymptomId = 11,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 1,
                            SymptomId = 11,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            SymptomId = 13,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 1,
                            SymptomId = 13,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 1,
                            SymptomId = 13,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 1,
                            SymptomId = 14,
                            SymptomValue = "Mild"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 1,
                            SymptomId = 14,
                            SymptomValue = "Moderate"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 1,
                            SymptomId = 14,
                            SymptomValue = "Severe"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 2,
                            SymptomId = 3,
                            SymptomValue = "No"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 2,
                            SymptomId = 3,
                            SymptomValue = "Yes"
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 2,
                            SymptomId = 10,
                            SymptomValue = "No"
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 2,
                            SymptomId = 10,
                            SymptomValue = "Yes"
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 2,
                            SymptomId = 15,
                            SymptomValue = "No"
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 2,
                            SymptomId = 15,
                            SymptomValue = "Yes"
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 2,
                            SymptomId = 16,
                            SymptomValue = "No"
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 2,
                            SymptomId = 16,
                            SymptomValue = "Yes"
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 2,
                            SymptomId = 17,
                            SymptomValue = "No"
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 2,
                            SymptomId = 17,
                            SymptomValue = "Yes"
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 2,
                            SymptomId = 18,
                            SymptomValue = "No"
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 2,
                            SymptomId = 18,
                            SymptomValue = "Yes"
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "1"
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "2"
                        },
                        new
                        {
                            Id = 48,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "3"
                        },
                        new
                        {
                            Id = 49,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "4"
                        },
                        new
                        {
                            Id = 50,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "5"
                        },
                        new
                        {
                            Id = 51,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "6"
                        },
                        new
                        {
                            Id = 52,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "7"
                        },
                        new
                        {
                            Id = 53,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "8"
                        },
                        new
                        {
                            Id = 54,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "9"
                        },
                        new
                        {
                            Id = 55,
                            CategoryId = 3,
                            SymptomId = 12,
                            SymptomValue = "10"
                        },
                        new
                        {
                            Id = 56,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "1"
                        },
                        new
                        {
                            Id = 57,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "2"
                        },
                        new
                        {
                            Id = 58,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "3"
                        },
                        new
                        {
                            Id = 59,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "4"
                        },
                        new
                        {
                            Id = 60,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "5"
                        },
                        new
                        {
                            Id = 61,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "6"
                        },
                        new
                        {
                            Id = 62,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "7"
                        },
                        new
                        {
                            Id = 63,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "8"
                        },
                        new
                        {
                            Id = 64,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "9"
                        },
                        new
                        {
                            Id = 65,
                            CategoryId = 3,
                            SymptomId = 19,
                            SymptomValue = "10"
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.ToDo.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ToDo", "dbo");
                });

            modelBuilder.Entity("AH.CancerConnect.API.SharedModels.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MychartLogin")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Patient", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 10, 28, 13, 51, 0, 336, DateTimeKind.Utc).AddTicks(2102),
                            FirstName = "Test",
                            LastName = "User",
                            MychartLogin = "testuser",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.Drainage.DrainageSetup.Drain", b =>
                {
                    b.HasOne("AH.CancerConnect.API.Features.Drainage.DrainageSetup.DrainageSetup", "DrainageSetup")
                        .WithMany("Drains")
                        .HasForeignKey("DrainageSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageSetup");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.Drainage.DrainageSetup.DrainageSetup", b =>
                {
                    b.HasOne("AH.CancerConnect.API.SharedModels.Patient", "Patient")
                        .WithOne("DrainageSetup")
                        .HasForeignKey("AH.CancerConnect.API.Features.Drainage.DrainageSetup.DrainageSetup", "PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.Notes.Note", b =>
                {
                    b.HasOne("AH.CancerConnect.API.SharedModels.Patient", "Patient")
                        .WithMany("Notes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomDetail", b =>
                {
                    b.HasOne("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomCategory", "Category")
                        .WithMany("SymptomDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomEntry", "SymptomEntry")
                        .WithMany("SymptomDetails")
                        .HasForeignKey("SymptomEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AH.CancerConnect.API.Features.SymptomsTracking.Models.Symptom", "Symptom")
                        .WithMany("SymptomDetails")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Symptom");

                    b.Navigation("SymptomEntry");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomEntry", b =>
                {
                    b.HasOne("AH.CancerConnect.API.SharedModels.Patient", "Patient")
                        .WithMany("SymptomEntries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomRange", b =>
                {
                    b.HasOne("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomCategory", "Category")
                        .WithMany("SymptomRanges")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AH.CancerConnect.API.Features.SymptomsTracking.Models.Symptom", "Symptom")
                        .WithMany("SymptomRanges")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.ToDo.ToDo", b =>
                {
                    b.HasOne("AH.CancerConnect.API.SharedModels.Patient", "Patient")
                        .WithMany("ToDos")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.Drainage.DrainageSetup.DrainageSetup", b =>
                {
                    b.Navigation("Drains");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.Symptom", b =>
                {
                    b.Navigation("SymptomDetails");

                    b.Navigation("SymptomRanges");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomCategory", b =>
                {
                    b.Navigation("SymptomDetails");

                    b.Navigation("SymptomRanges");
                });

            modelBuilder.Entity("AH.CancerConnect.API.Features.SymptomsTracking.Models.SymptomEntry", b =>
                {
                    b.Navigation("SymptomDetails");
                });

            modelBuilder.Entity("AH.CancerConnect.API.SharedModels.Patient", b =>
                {
                    b.Navigation("DrainageSetup");

                    b.Navigation("Notes");

                    b.Navigation("SymptomEntries");

                    b.Navigation("ToDos");
                });
#pragma warning restore 612, 618
        }
    }
}
